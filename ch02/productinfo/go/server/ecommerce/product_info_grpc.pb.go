// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ecommerce

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ProductInfoClient is the client API for ProductInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductInfoClient interface {
	AddProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*ProductID, error)
	GetProduct(ctx context.Context, in *ProductID, opts ...grpc.CallOption) (*Product, error)
}

type productInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewProductInfoClient(cc grpc.ClientConnInterface) ProductInfoClient {
	return &productInfoClient{cc}
}

var productInfoAddProductStreamDesc = &grpc.StreamDesc{
	StreamName: "AddProduct",
}

func (c *productInfoClient) AddProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*ProductID, error) {
	out := new(ProductID)
	err := c.cc.Invoke(ctx, "/ecommerce.ProductInfo/AddProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var productInfoGetProductStreamDesc = &grpc.StreamDesc{
	StreamName: "GetProduct",
}

func (c *productInfoClient) GetProduct(ctx context.Context, in *ProductID, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, "/ecommerce.ProductInfo/GetProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductInfoService is the service API for ProductInfo service.
// Fields should be assigned to their respective handler implementations only before
// RegisterProductInfoService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type ProductInfoService struct {
	AddProduct func(context.Context, *Product) (*ProductID, error)
	GetProduct func(context.Context, *ProductID) (*Product, error)
}

func (s *ProductInfoService) addProduct(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.AddProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/ecommerce.ProductInfo/AddProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.AddProduct(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *ProductInfoService) getProduct(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/ecommerce.ProductInfo/GetProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetProduct(ctx, req.(*ProductID))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterProductInfoService registers a service implementation with a gRPC server.
func RegisterProductInfoService(s grpc.ServiceRegistrar, srv *ProductInfoService) {
	srvCopy := *srv
	if srvCopy.AddProduct == nil {
		srvCopy.AddProduct = func(context.Context, *Product) (*ProductID, error) {
			return nil, status.Errorf(codes.Unimplemented, "method AddProduct not implemented")
		}
	}
	if srvCopy.GetProduct == nil {
		srvCopy.GetProduct = func(context.Context, *ProductID) (*Product, error) {
			return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "ecommerce.ProductInfo",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "AddProduct",
				Handler:    srvCopy.addProduct,
			},
			{
				MethodName: "GetProduct",
				Handler:    srvCopy.getProduct,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "product_info.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewProductInfoService creates a new ProductInfoService containing the
// implemented methods of the ProductInfo service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewProductInfoService(s interface{}) *ProductInfoService {
	ns := &ProductInfoService{}
	if h, ok := s.(interface {
		AddProduct(context.Context, *Product) (*ProductID, error)
	}); ok {
		ns.AddProduct = h.AddProduct
	}
	if h, ok := s.(interface {
		GetProduct(context.Context, *ProductID) (*Product, error)
	}); ok {
		ns.GetProduct = h.GetProduct
	}
	return ns
}

// UnstableProductInfoService is the service API for ProductInfo service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableProductInfoService interface {
	AddProduct(context.Context, *Product) (*ProductID, error)
	GetProduct(context.Context, *ProductID) (*Product, error)
}
